#include <iostream>
#include <vector>
#include "../cpp/heartpy_core.h"

int main() {
  // Provided test data and sample rate
  const double fs = 100.0;
  const std::vector<double> ppg_ecg_data = {
    -0.125, 0.035, 0.194, 0.35, 0.5, 0.638, 0.76, 0.86, 0.939, 0.989,
    1.0, 0.97, 0.9, 0.793, 0.655, 0.491, 0.309, 0.118, -0.08, -0.27,
    -0.45, -0.62, -0.76, -0.87, -0.95, -0.99, -0.99, -0.95, -0.86, -0.74,
    -0.58, -0.4, -0.2, -0.0, 0.203, 0.398, 0.58, 0.74, 0.87, 0.96,
    1.0, 0.99, 0.94, 0.84, 0.7, 0.53, 0.33, 0.12, -0.1, -0.3, -0.5,
    -0.67, -0.8, -0.9, -0.96, -0.98, -0.95, -0.88, -0.77, -0.62, -0.44,
    -0.24, -0.02, 0.19, 0.39, 0.58, 0.74, 0.87, 0.96, 1.0, 0.99, 0.94,
    0.84, 0.7, 0.53, 0.33, 0.12, -0.1, -0.3, -0.5, -0.67, -0.8, -0.9,
    -0.96, -0.98, -0.95, -0.88, -0.77, -0.62, -0.44, -0.24, -0.02, 0.19,
    0.39, 0.58, 0.74, 0.87, 0.96, 1.0, 0.99, 0.94, 0.84, 0.7, 0.53,
    0.33, 0.12, -0.1, -0.3, -0.5, -0.67, -0.8, -0.9, -0.96, -0.98, -0.95,
    -0.88, -0.77, -0.62, -0.44, -0.24, -0.02, 0.19, 0.39, 0.58, 0.74,
    0.87, 0.96, 1.0, 0.99, 0.94, 0.84, 0.7, 0.53, 0.33, 0.12, -0.1,
    -0.3, -0.5, -0.67, -0.8, -0.9, -0.96, -0.98, -0.95, -0.88, -0.77,
    -0.62, -0.44, -0.24, -0.02, 0.19, 0.39, 0.58, 0.74, 0.87, 0.96,
    1.0, 0.99, 0.94, 0.84, 0.7, 0.53, 0.33, 0.12, -0.1, -0.3, -0.5,
    -0.67, -0.8, -0.9, -0.96, -0.98, -0.95, -0.88, -0.77, -0.62, -0.44,
    -0.24, -0.02, 0.19, 0.39, 0.58, 0.74, 0.87, 0.96, 1.0, 0.99, 0.94,
    0.84, 0.7, 0.53, 0.33, 0.12, -0.1, -0.3, -0.5, -0.67, -0.8, -0.9,
    -0.96, -0.98, -0.95, -0.88, -0.77, -0.62, -0.44, -0.24, -0.02, 0.19,
    0.39, 0.58, 0.74, 0.87, 0.96, 1.0, 0.99, 0.94, 0.84, 0.7, 0.53
  };

  heartpy::Options opt;
  opt.lowHz = 0.5; opt.highHz = 5.0; opt.iirOrder = 2;
  opt.refractoryMs = 250.0; opt.thresholdScale = 0.5;
  opt.bpmMin = 30.0; opt.bpmMax = 240.0;
  opt.cleanRR = false;
  
  auto res = heartpy::analyzeSignal(ppg_ecg_data, fs, opt);
  std::cout << "C++ BPM: " << res.bpm << "\n";
  std::cout << "C++ Peaks: " << res.peakList.size() << "\n";
  std::cout << "C++ IBIs: " << res.ibiMs.size() << "\n";
  for (size_t i = 0; i < res.ibiMs.size(); ++i) {
    std::cout << (i ? "," : "IBI(ms): ") << res.ibiMs[i];
  }
  if (!res.ibiMs.empty()) std::cout << "\n";
  std::cout << "C++ SDNN: " << res.sdnn << "\n";
  std::cout << "C++ RMSSD: " << res.rmssd << "\n";
  std::cout << "C++ pNN50: " << res.pnn50 << "\n";
  std::cout << "C++ LF/HF: " << res.lfhf << "\n";
  std::cout << "C++ Quality.good: " << (res.quality.goodQuality ? 1 : 0) << "\n";
  return 0;
}
